# Real-Time Traffic and Route Optimizer (with Mock Option)

import networkx as nx
import matplotlib.pyplot as plt

# Set this to True to use mock data instead of real API
USE_MOCK_DATA = True

# If using real data, uncomment the following lines:
# import googlemaps
# gmaps = googlemaps.Client(key='AIzaSyD6weEz28oqcKlc7FOgA9zKxJRf3uAHpU8')

# Location mapping
locations = {
    'A': 'Bangalore, India',
    'B': 'Electronic City, Bangalore, India',
    'C': 'Whitefield, Bangalore, India',
    'D': 'Indiranagar, Bangalore, India'
}

# Initialize graph
graph = {key: {} for key in locations.keys()}

# Mock traffic durations in minutes (undirected)
mock_graph = {
    'A': {'B': 20, 'C': 35},
    'B': {'A': 20, 'C': 15, 'D': 30},
    'C': {'A': 35, 'B': 15, 'D': 10},
    'D': {'B': 30, 'C': 10}
}

# Real-time graph builder using Google Maps (disabled in mock mode)
def build_graph(loc_dict):
    keys = list(loc_dict.keys())
    for i in range(len(keys)):
        for j in range(i + 1, len(keys)):
            start = loc_dict[keys[i]]
            end = loc_dict[keys[j]]
            try:
                matrix = gmaps.distance_matrix(start, end, departure_time='now', traffic_model='best_guess')
                duration = matrix['rows'][0]['elements'][0]['duration_in_traffic']['value']  # in seconds
                minutes = duration / 60
                graph[keys[i]][keys[j]] = minutes
                graph[keys[j]][keys[i]] = minutes
            except Exception as e:
                print(f"Error fetching data for {start} -> {end}: {e}")

# Dijkstra’s algorithm with safe fallback
def dijkstra(graph, start_node, end_node):
    shortest_paths = {start_node: (None, 0)}
    current_node = start_node
    visited = set()

    while current_node is not None:
        visited.add(current_node)
        destinations = graph[current_node]
        current_cost = shortest_paths[current_node][1]

        for neighbor, weight in destinations.items():
            if neighbor in visited:
                continue
            new_cost = current_cost + weight
            if neighbor not in shortest_paths or new_cost < shortest_paths[neighbor][1]:
                shortest_paths[neighbor] = (current_node, new_cost)

        next_nodes = {node: cost for node, cost in shortest_paths.items() if node not in visited}
        if not next_nodes:
            break
        current_node = min(next_nodes, key=lambda k: next_nodes[k][1])

    if end_node not in shortest_paths:
        return [], float('inf')

    # Build path
    path = []
    node = end_node
    while node is not None:
        path.append(node)
        node = shortest_paths[node][0]
    path.reverse()

    return path, shortest_paths[end_node][1]

# Build graph from mock or real
if USE_MOCK_DATA:
    graph = mock_graph
    print("🔧 Using mocked traffic data.")
else:
    build_graph(locations)

# Show the graph structure
print("🚦 Graph with traffic times (minutes):")
for node in graph:
    print(f"{node}: {graph[node]}")

# Set start and end points
start_node = 'A'
end_node = 'D'

# Get optimal route
path, total_time = dijkstra(graph, start_node, end_node)

# Output result
if not path:
    print(f"\n⚠ No route found from {locations[start_node]} to {locations[end_node]}.")
else:
    readable_path = " → ".join([locations.get(n, n) for n in path])
    print(f"\n✅ Best route from {locations[start_node]} to {locations[end_node]}: {readable_path}")
    print(f"⏱ Estimated travel time with traffic: {total_time:.2f} minutes")

# Optional: Visualize the graph
G = nx.Graph()
for node in graph:
    for neighbor, weight in graph[node].items():
        G.add_edge(node, neighbor, weight=round(weight, 2))

pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_size=800, node_color='lightgreen', font_weight='bold')
labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
plt.title("Traffic-Aware Route Graph")
plt.show()
